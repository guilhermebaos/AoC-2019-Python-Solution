from math import atan, degrees


def distance(p1=(), p2=()):
    return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)**0.5


def line_2d(p1=(), p2=()):
    try:
        m = (p2[1] - p1[1]) / (p2[0] - p1[0])
        b = p1[1] - m * p1[0]
        return [m, b]
    except ZeroDivisionError:
        if p2[1] == p1[1]:
            return ['']
        else:
            m = 'N.D.'
            b = 'N.D.'
            return [m, b]


# Find a point: map_puzzle[y][x]
map_puzzle = [['.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '#', '.', '.', '#'], ['.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '#', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.'], ['#', '#', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '#', '.', '.', '#', '.', '.', '#', '#', '.', '.', '.', '#', '.', '#', '#', '.', '#', '#', '#', '.', '.', '.', '.'], ['.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.'], ['.', '#', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.'], ['.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '#'], ['#', '.', '.', '.', '#', '.', '.', '#', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.'], ['.', '.', '.', '.', '.', '.', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '#', '.', '#', '.', '.', '.'], ['#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '#', '#', '#', '#'], ['.', '#', '#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.'], ['.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '#', '.', '.', '#', '.', '.', '.', '.', '#'], ['.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '#', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '#'], ['.', '.', '.', '.', '#', '.', '.', '#', '.', '#', '.', '#', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#'], ['#', '#', '.', '.', '.', '.', '#', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#'], ['.', '#', '#', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '#', '.', '#', '#', '.', '.', '.', '.'], ['.', '.', '.', '#', '#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '#', '.', '#', '.', '.', '.', '#', '.'], ['#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '#', '#', '.', '#', '.', '.', '.', '#', '.', '.', '#', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '#', '#', '#'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '#', '.'], ['.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.'], ['.', '#', '#', '#', '#', '#', '.', '.', '#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['#', '.', '.', '.', '.', '#', '.', '#', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.'], ['.', '.', '.', '#', '#', '#', '#', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '#', '.'], ['.', '.', '#', '#', '.', '.', '.', '.', '#', '.', '#', '#', '#', '.', '#', '#', '.', '#', '.', '#', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#'], ['.', '.', '.', '.', '#', '.', '#', '#', '#', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '#', '#', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.'], ['.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '#', '.', '#', '.', '.', '#', '.', '.', '.', '.', '.'], ['.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.'], ['#', '.', '.', '.', '.', '.', '#', '#', '#', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.'], ['.', '.', '#', '#', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '#', '.', '#', '#'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '#', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '#', '#'], ['#', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '.', '.', '#'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '#', '.', '#', '.', '.']]
laser_puzzle = [23, 19]

map_test
laser_test1 = [11, 13]

Map = map_puzzle[:]
laser_coor = laser_puzzle[:]

# Coordinates of the asteroids
astro_coor = []
y = -1
for line in Map:
    y += 1
    x = -1
    for point in line:
        x += 1
        if point == '#':
            astro_coor += [[x-laser_coor[0], (y-laser_coor[1])*(-1)]]

# Lines that the laser makes with other asteroids
lines_laser = []
astro1 = [0, 0]
for astro2 in astro_coor:
    if astro1 == astro2:
        pass
    else:
        if astro2[0] > astro1[0]:
            lines_laser += [[line_2d(astro1, astro2), 'xup']]
        elif astro2[0] < astro1[0]:
            lines_laser += [[line_2d(astro1, astro2), 'xdown']]
        elif astro2[1] > astro1[1]:
            lines_laser += [[line_2d(astro1, astro2), 'yup']]
        elif astro2[1] < astro1[1]:
            lines_laser += [[line_2d(astro1, astro2), 'ydown']]

# Angle that the lines make with the starting position (up)
inc = []
for line in lines_laser:
    if line[0][0] != 'N.D.':
        if line[1] == 'xup':
            i = degrees(atan(line[0][0]))
            i = 90 - i
            inc += [i]
        else:
            i = degrees(atan(line[0][0]))
            i = 270 - i
            inc += [i]
    else:
        if line[1] == 'yup':
            inc += [0]
        else:
            inc += [180]

# Get the order of the angles in which the laser will fire
inc_order = inc[:]
print(inc_order, '\n')
inc.sort()
print(inc, '\n')
c = -1
last_pop = -1
pop_order = []
while True:
    c += 1
    try:
        item = inc[c]
    except IndexError:
        c = 0
        last_pop -= 360
        try:
            item = inc[c]
        except IndexError:
            break
    if last_pop < item:
        c -= 1
        inc.remove(item)
        last_pop = item
        pop_order += [item]
print(pop_order, '\n')

# Get the asteroids corresponding to the lines in which the laser will fire
dest_astro = []
for item1 in pop_order:
    poss_astro, dists = [], []
    for c, item2 in enumerate(inc_order):
        if item1 == item2:
            poss_astro += [c]
    for item3 in poss_astro:
        dists += [distance((0, 0), astro_coor[item3])]
    dest_astro += [astro_coor[poss_astro[dists.index(min(dists))]]]

# Convert the coordinates back to normal
new_dest_astro = []
print(dest_astro, '\n')
for item in dest_astro:
    x_new = item[0] + laser_coor[0]
    y_new = item[1] * (-1) + laser_coor[1]
    new_dest_astro += [[x_new, y_new]]
print(new_dest_astro, '\n')

print(pop_order[0], pop_order[1], pop_order[2], pop_order[9], pop_order[19], pop_order[49], pop_order[99], '\n')

print(new_dest_astro[0], new_dest_astro[1], new_dest_astro[2], new_dest_astro[9], new_dest_astro[19], new_dest_astro[49], new_dest_astro[99], new_dest_astro[198], new_dest_astro[199], new_dest_astro[200], new_dest_astro[-1], '\n')

print(new_dest_astro[199][0]*100 + new_dest_astro[199][1])
